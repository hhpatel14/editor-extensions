name: Release

on:
  push:
    tags:
      - "v*"

env:
  HUSKY: 0

jobs:
  test_the_release:
    name: Test the release (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: macos
          - os: windows-latest
            platform: windows
      max-parallel: 3
    outputs:
      prerelease: ${{ steps.determine_prerelease.outputs.prerelease }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Determine prerelease
        id: determine_prerelease
        shell: bash
        run: |
          if [[ "${{ github.ref_name }}" == *-* ]]; then
            echo "prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "prerelease=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install dependencies, download runtime assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm ci
          npm run collect-assets -- --use-release

      # Run tests on different OSes
      - name: Run tests (Linux)
        if: matrix.platform == 'linux'
        run: xvfb-run -a npm run test

      - name: Run tests (macOS)
        if: matrix.platform == 'macos'
        run: npm test

      - name: Run tests (Windows)
        if: matrix.platform == 'windows'
        shell: cmd
        run: npm test

  package:
    needs: test_the_release
    name: Generate the vsix for the release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Build the project and generate the .vsix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm ci
          npm run build
          npm run collect-assets -- --use-release
          npm run dist

      - name: Package VSIX (pre-release)
        if: ${{ needs.test_the_release.outputs.prerelease == 'true' }}
        run: |
          npm run package -- --pre-release

      - name: Package VSIX (release)
        if: ${{ needs.test_the_release.outputs.prerelease == 'false' }}
        run: |
          npm run package

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode-extension-${{ matrix.platform }}
          path: ./dist/*.vsix

  generate_changelog:
    name: Generate Changelog
    needs: test_the_release
    uses: konveyor/release-tools/.github/workflows/generate-changelog.yml@main
    with:
      version: ${{ github.ref_name }}
      prev_version: $(gh api repos/${{ github.repository }}/releases/latest | jq -r '.tag_name')
      repository: ${{ github.repository }}
      ref: ${{ github.sha }}
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Final Release
    runs-on: ubuntu-latest
    needs: [test_the_release, package, generate_changelog]
    steps:
      - name: Add release details to the step summary
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" <<EOF
          ## Release Information
          Tag: __${{ github.ref_name }}__
          Pre-Release: __${{ needs.test_the_release.outputs.prerelease }}__
          EOF

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Changelog Artifact
        uses: actions/download-artifact@v4
        with:
          name: changelog-artifact
          path: ./artifacts

      - name: List available artifacts
        run: |
          curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: vscode-extension-linux
          path: ./artifacts/vscode-extension-linux

      - name: Verify Downloaded Artifacts
        run: ls -R ./artifacts

      - name: Find and set VSIX filename
        id: vsix_info
        run: |
          VSIX_FILE=$(find ./artifacts/vscode-extension-linux -name "*.vsix" -type f | head -1)
          VSIX_NAME=$(basename "$VSIX_FILE")
          echo "vsix_path=$VSIX_FILE" >> "$GITHUB_OUTPUT"
          echo "vsix_name=$VSIX_NAME" >> "$GITHUB_OUTPUT"
          echo "Found VSIX: $VSIX_NAME at $VSIX_FILE"

      - name: Set up Node.js for publishing
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Publish to VS Code Marketplace (release)
        if: ${{ needs.test_the_release.outputs.prerelease == 'false' }}
        run: |
          VSIX_FILE=$()
          echo "Publishing ${{ steps.vsix_info.outputs.vsix_path }}"
          npx vsce publish --packagePath "${{ steps.vsix_info.outputs.vsix_path }}"
        env:
          VSCE_PAT: ${{ secrets.VSCODE_MARKETPLACE_TOKEN }}

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          commit: ${{ github.sha }}
          bodyFile: ./artifacts/release.md
          artifacts: |
            ${{ steps.vsix_info.outputs.vsix_path }}
          prerelease: ${{ needs.test_the_release.outputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
